---
layout:     post
title:      Title has a title.
date:       2014-06-08 11:22:29
summary:    Summ1
categories: jekyll pixyll
---


# Searching for an AI Toy

The goal of this email is the following:

1. Give you a feel for the typical AI repositories (in particular, highlighting how they are just implementations of specific AI algorithms).
2. Provide some examples of what good "toy" AI products on the web already look like.
3. Propose some "toy" projects of our own so that that we can start immediately building something.

# 1 Top AI Repositories on GitHub

There are, roughly speaking, three types of AI repositories on GitHub:

1. Libraries with specific AI algorithm implementations.
2. Libraries with college course/textbook AI algorithm implementations (basically the same as (1)).
3. Stupid games built on top of AI algorithms (probably built using (1)-(2)).

Unfortunately, I found very few specific AI implementations with practical, ready-to-launch applications underneath.  I think, in order to find these, you have to search for specific AI algorithms that you're interested in. **That is, you already have to know the algorithm you're trying to exploit.**

Nevertheless, I present below the top AI repositories on GitHub, divided by language.

## 1.1 Top JavaScript Repositories

The top hits for JavaScript AI libraries in GitHub were all stupid browser games. Once you get past those, you get to repositories that implement a wide range of well-known AI algorithms (examples might include the "decision tree algorithm" or the "neural network algorithm"). To make things worse, these are mostly just "toy" repositories: simple examples built for the purposes of learning as opposed to serious implementions. Finally, once you get past those, you get repositories that include a bunch of totally useless AI tools (example: tools that help you determine if pictures are mostly red, mostly green, or mostly blue). Below are some examples of all of these.

1. **[Harness.](https://github.com/brainwipe/Harness)**

 > Harness is a browser based toolbox playground for neural networks, currently in development. The user drags and drops computational blocks onto a workspace and then connects them together to move data between blocks. The simulation can be run to see data moving around the model.

2. [**AI algorithms.**](https://github.com/tandberg/ai-algorithms)

 > This is a repository including the implementation of some basic Artificial Intelligence algorithms. All the algorithms is written as a standalone program in Python.

 > **Algorithms**
 >
 > - Expectation Maximation
 > - Simulated Annealing
 > - A* search
 > - Artificial Neural Network (comming)
 > - Min-conflicts (comming)
 > - Minimal Independent Set (comming)
 > - K-means
 > - ID3 (comming)
 > - Evolutionary algorithm (comming)
 > - Parent-mate selection
 > - Fitness Proportionate
 > - Sigma scaling
 > - Tournament section
 > - Boltzmann selection
 > - Adult selection
 > - Full population Replacement
 > - Over production
 > - Generation mixing

3. [**JavaScript and Artificial Intelligence.**](https://github.com/ajlopez/JavaScriptAI)

 > Samples and demos of JavaScript Artificial Intelligence.
 >
 > AI is a broad term, but it is the better I known.
 >
 > The samples are for Node.js and for browser. The covered topics (Work in Progress):
 >
 > - Tree Evaluation
 > - Neural Networks
 > - Genetic Algorithms
 > - Evolutionary Programming
 > - Hybrid Approach
 > - Machine and Deep Learning
 > - Decision Trees

4. [**ColorBot.**](https://github.com/primaryobjects/colorbot)

 > ColorBot Neural Network uses machine learning (ie., artificial intelligence) to learn which pictures are generally red, green, or blue overall. It does this by using a trained neural network, which functions similar to the human brain.

5. [**Le-ai-js.**](https://github.com/triglian/le-ai-js)

 > Le-ai-js is a Learning/Educational javascript framework for Artificial Intelligence

## 1.2 Top Python Repositories

1. [**Simple AI.**](http://github.com/simpleai-team/simpleai)

 > This lib implements many of the artificial intelligence algorithms described on the book "Artificial Intelligence, a Modern Approach", from Stuart Russel and Peter Norvig.

2. [**Artificial Intelligence and Machine Learning.**](https://github.com/emilmont/Artificial-Intelligence-and-Machine-Learning)

 > - This project contains my algorithm implementations for the following online courses:
 >
 >     - Introduction to Artificial Intelligence: http://www.ai-class.com
 >     - Overview of AI, Search
 >     - Statistics, Uncertainty, and Bayes networks
 >     - Machine Learning
 >     - Logic and Planning
 >     - Markov Decision Processes and Reinforcement Learning
 >     - Hidden Markov Models and Filters
 >     - Adversarial and Advanced Planning
 >     - Image Processing and Computer Vision
 >     - Robotics and robot motion planning
 >     - Natural Language Processing and Information Retrieval
 >
 >
 > - Introduction to Machine Learning: http://www.ml-class.com
 >     - Linear Regression, Gradient Descent
 >     - Logistic Regression
 >     - Multi-class Classification, Neural Networks
 >     - Neural Networks Learning
 >     - Regularized Linear Regression and Bias vs Variance, Polynomial Regression
 >     - Support Vector Machines, Classifiers
 >     - K-means Clustering and Principal Component Analysis
 >     - Anomaly Detection and Recommender Systems
 >
 >  - **Artificial Intelligence for Robotics:** http://www.udacity.com/course/cs373
 >     - Localization: Monte-Carlo, Kalman Filters, Particle Filters.
 >     - Planning and search: A- search,  dynamic programming.
 >     - Controls: PID, parameters optimization, smoothing.
 >     - Simultaneous localization and mapping (SLAM).

 >  - **Computational Investing, Part I: https://www.coursera.org/course/compinvesting1**
 >     - Data Analysis with Python pandas and QSTK
 >     - Event profiling
 >     - Portfolio Optimization

 >  - **Natural Language Processing: https://www.coursera.org/course/nlangp**
 >     - Hidden Markov models, and tagging problems: Viterbi algorithm

## 1.3 Top Java and C++ Repositories

1. [**AI.**](https://github.com/flovera1/AI)

 > **Genetic algorithms-classical example**
 >
 > This part of the repository tries to explain what a genetic algorithm is and how "evolution" occurs. A key idea is to find a good representation of the chromosome and how to encode, decode and "score" (fitness function) a chromosome. We are trying to write a genetic algorithm which input is a number and the outout is a formula that generate that number just using: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' and operators such as: '+', '-', '*', '/'. For example: 10 is an input and an output could be: 6 + 4, 8 + 2, 7 + 5 - 2, and so on. The number of generations is limited to 32000.
 > The code is written in java[...]
 >
 > **Descendent Gradient algorithm**
 >
 > C++ code :D in this code I implemented the descendent algorithm for two variables. For several variables I'd recommend use the same idea, changing as many arguments as it's needed.
 > The code is written in C++[...]
 >
 > [...the rest of this description not displayed...]

2. [**ABAGAIL.**](https://github.com/pushkar/ABAGAIL)

 > The library contains a number of interconnected Java packages that implement machine learning and artificial intelligence algorithms. These are artificial intelligence algorithms implemented for the kind of people that like to implement algorithms themselves.

3. [**dANN.**](https://github.com/hoijui/dANN)

 > An Artificial Intelligence Library written in Java.

# 2 Non GitHub Repositories + Well-Known APIs.
## 2.1 The Top Repositories on MLOSS.org

MLOSS.org is, evidently, a well-known open-source AI community. Skim these repos if you're interested (and notice the downloads range from 1k-25k per repository, which is actually pretty high). Also note that most of these implementations/libraries are written in C++, Java, and Python: http://www.mloss.org/software/views/.

## 2.2 [The Juggernaut List of Well-Known APIs.]

[The Juggernaut List.](http://www.programmableweb.com/news/top-10-machine-learning-apis-att-speech-ibm-watson-google-prediction/analysis/2015/08/03?utm_content=buffere1a98&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)

These APIs will be the quickest to pull out of the box and start immediately playing with. **This therefore makes it the most important list on this email.**

# 3 Interesting "Toy" A.I. Products on the Web

The following products strike me as great examples of toy products that other people have already built and launched.

1. [Grammarly](https://www.grammarly.com). This site analyzes your writing and gives you feedback. They make you sign up for a monthly subscription just to try it, and claim they have millions of fans. I'd really love to try it out, but am skeptical it's worth $30 (what they charge per month).

2. [Crystal](https://www.crystalknows.com/). Tells you how to write better cold emails to individuals based off of their personalities (using AI to analyze social profiles online).

3. [Luminoso](http://www.luminoso.com/). Analyzes Twitter/Social Media data in real time to help big companies figure out what people are saying about their products/brands (i.e., analyzes tweets for certain positive or negative emotions and relays those emotions back to clients in the form of reports).

# 4 Getting to the Leading Edge of A.I.

Suppose we wanted to become experts in AI. Here are two strategies:

1. Read [Artificial Intelligence: A Modern Approach](http://www.amazon.com/Artificial-Intelligence-Modern-Approach-3rd/dp/0136042597/ref=sr_1_2?s=books&ie=UTF8&qid=1439826460&sr=1-2&keywords=artificial+intelligence) (1152 pages).

 ![Artificial Intelligence: A Modern Approach](http://ecx.images-amazon.com/images/I/51BiLRYZu1L._SX397_BO1,204,203,200_.jpg)

 In addition, here is the [MIT reading syllabus for the graduate course "Techniques in Artificial Intelligence (SMA 5504)"](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-825-techniques-in-artificial-intelligence-sma-5504-fall-2002/calendar/) (using this textbook).

2. Read [Artificial Intelligence for Humans, Volume 1: Fundamental Algorithms](http://www.amazon.com/Artificial-Intelligence-Humans-Fundamental-Algorithms/dp/1493682229/ref=sr_1_1?s=books&ie=UTF8&qid=1439826460&sr=1-1&keywords=artificial+intelligence) (222 pages) followed by [Artificial Intelligence for Humans, Volume 2: Nature-Inspired Algorithms](www.amazon.com/Artificial-Intelligence-Humans-Volume-Nature-Inspired/dp/1499720572/ref=pd_bxgy_14_img_y) (242 pages).

 ![Artificial Intelligence for Humans, Volume 1: Fundamental Algorithms](http://ecx.images-amazon.com/images/I/51QCYhzv7ML._SX404_BO1,204,203,200_.jpg)

 ![Artificial Intelligence for Humans, Volume 2: Nature-Inspired Algorithms](http://ecx.images-amazon.com/images/I/51zc-9hM9cL._SX404_BO1,204,203,200_.jpg)

In addition, I think that, no matter what, we would probably want to read some of this basic text first:  [Introduction to Algorithms, 3rd Edition](www.amazon.com/Introduction-Algorithms-3rd-Thomas-Cormen/dp/0262033844/ref=sr_1_3?s=books&ie=UTF8&qid=1439828147&sr=1-3&keywords=algorithms).

![Introduction to Algorithms, 3rd Edition](http://ecx.images-amazon.com/images/I/51WLL1XC30L._SX442_BO1,204,203,200_.jpg)

And, finally, here is the [MIT syllabus for the undergraduate course "Introduction to Algorithms"](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/readings/) (using this textbook).

#4 Toys I would Like to make.

A good "toy" satisfies the following:

1. It doesn't have to be 10x from the start, but there has to be a non-trivial chance that it could turn into something 10x in a year or two.
2. It has to help us get to the leading edge of a field.
3. It has to be something that we could immediately start selling (probably, at first, as just another incremental product).

## 4.1 Q&A Machine

Consider the following simple AI trick:

![Barack Obama AI Trick](~/Pictures/Barack_AI_Trick.png)

Now multiply this by a thousand.  Imagine populating such AI with every  Wikipedia entry, StackExchange post, Quora answer, and so forth. Imagine being to ask and answer questions immediately from the console.

**Claim:** Having a 50% chance of getting your question answered immediately by A.I. would be 10x better than having to wait for humans to answer it for you online.

Of course, this is a long-term dream. And I'm sure many big companies (i.e., WolframAlpha) have been working on just this sort of thing for decades. But is there some use case they're missing? Is there some "sub-toy" that we could make in a few weeks with this as our end goal?

## 4.2 English to Code Generator

**Input:** "Siri, write me a function that takes two arbitrary numbers as an input, and spits out their sum. If this sum is negative, have the function just return zero."

**Output:** "Sure, here is your function."

```js
var outputFunction = function (num1, num2) {
  var sum = num1 + num2;
    if (sum <= 0) {
      return 0;
    } else {
      return sum;
    }
};
```

**Input:** "Rename the first input `first` and the second input `second`."

**Output:** "Here you go."

```js
var outputFunction = function (first, second) {
  var sum = first + second;
    if (sum <= 0) {
      return 0;
    } else {
      return sum;
    }
};
```

## 4.3 Voice Control of Window Manipulation

**Input:** "Siri, retrieve my non-trivial problems list from Gmail that I sent to Carl the other day. Show this email maximized on my desktop."

**Output:**

![](~/Pictures/non-trivial-problems-list.png)

## 4.4 Teachable Q&A Systems

This idea significantly overlaps with the previous three. The idea is this: instead of populating a super AI entity with all of Wikipedia's data (or whatever), what if we just created a natural language processing bot that was "teachable" by us geeks. Like, I could say "Siri, save this gmail link as my 'Non-Trivial Problems List'. And then later on I could say "Siri, pull up my non-trivial problems list; then maximize it." Here's a well-known API to play around with: http://wit.ai/. Perhaps this is possible already?

Would such a product be 10x *now*? No. What about *later*? I would say there's a 10% chance it could be. What do you think?
